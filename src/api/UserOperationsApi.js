/**
 * Hi-Zone Authentication-v2 api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddRoleRequest from '../model/AddRoleRequest';
import AddRoleResponse from '../model/AddRoleResponse';
import UserLoginRequest from '../model/UserLoginRequest';
import UserLoginResponse from '../model/UserLoginResponse';
import UserRegisterRequest from '../model/UserRegisterRequest';
import UserRegisterResponse from '../model/UserRegisterResponse';

/**
* UserOperations service.
* @module api/UserOperationsApi
* @version v1
*/
export default class UserOperationsApi {

    /**
    * Constructs a new UserOperationsApi. 
    * @alias module:api/UserOperationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addRole operation.
     * @callback module:api/UserOperationsApi~addRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddRoleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a role using role secret
     * @param {module:model/AddRoleRequest} addRoleRequest 
     * @param {module:api/UserOperationsApi~addRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddRoleResponse}
     */
    addRole(addRoleRequest, callback) {
      let postBody = addRoleRequest;
      // verify the required parameter 'addRoleRequest' is set
      if (addRoleRequest === undefined || addRoleRequest === null) {
        throw new Error("Missing the required parameter 'addRoleRequest' when calling addRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hi-zone-authentication-v2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddRoleResponse;
      return this.apiClient.callApi(
        '/user/role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/UserOperationsApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login using username and passowrd
     * @param {module:model/UserLoginRequest} userLoginRequest 
     * @param {module:api/UserOperationsApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserLoginResponse}
     */
    login(userLoginRequest, callback) {
      let postBody = userLoginRequest;
      // verify the required parameter 'userLoginRequest' is set
      if (userLoginRequest === undefined || userLoginRequest === null) {
        throw new Error("Missing the required parameter 'userLoginRequest' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserLoginResponse;
      return this.apiClient.callApi(
        '/user/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/UserOperationsApi~registerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRegisterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register with username, password and email
     * @param {module:model/UserRegisterRequest} userRegisterRequest 
     * @param {module:api/UserOperationsApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRegisterResponse}
     */
    register(userRegisterRequest, callback) {
      let postBody = userRegisterRequest;
      // verify the required parameter 'userRegisterRequest' is set
      if (userRegisterRequest === undefined || userRegisterRequest === null) {
        throw new Error("Missing the required parameter 'userRegisterRequest' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserRegisterResponse;
      return this.apiClient.callApi(
        '/user/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
